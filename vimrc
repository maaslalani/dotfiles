" configuration generated by NIX
set nocompatible

filetype indent plugin on | syn on


autocmd BufEnter *.graphql set ft=graphql
autocmd BufEnter *.lock set ft=json
autocmd BufEnter *.nix set ft=nix
autocmd BufWrite *.go lua vim.lsp.buf.formatting()
autocmd CmdLineEnter : set nosmartcase
autocmd CmdLineLeave : set smartcase
autocmd TermOpen * setlocal nonumber signcolumn=no
set backspace=indent,eol,start
set cmdheight=1
set completeopt=menuone,noinsert,noselect
set concealcursor=""
set diffopt=filler,internal,algorithm:histogram,indent-heuristic
set encoding=utf-8
set laststatus=0
set numberwidth=1
set omnifunc=v:lua.vim.lsp.omnifunc
set printfont=PragmataPro:h12
set shiftwidth=2
set shortmess=filnxtToOFc
set signcolumn=yes
set softtabstop=2
set synmaxcol=300
set t_vb=
set tabstop=2
set timeoutlen=50
set undodir=~/.config/nvim/.undo
set updatetime=300
set wildmode=longest:full,full
set autoindent
set autoread
set autowrite
set nobackup
set nocompatible
set cursorline
set noerrorbells
set expandtab
set hidden
set hlsearch
set ignorecase
set incsearch
set lazyredraw
set number
set ruler
set showcmd
set noshowmode
set smartcase
set splitbelow
set splitright
set noswapfile
set termguicolors
set notimeout
set ttimeout
set ttyfast
set undofile
set visualbell
set nowb
set wildmenu
set nowrap
set nowritebackup
let completion_matching_strategy_list=['exact', 'substring', 'fuzzy']
let diagnostic_auto_popup_while_jump=0
let diagnostic_enable_underline=1
let diagnostic_enable_virtual_text=1
let diagnostic_insert_delay=0
let loaded_netrw=0

:command E Dirvish
:command Mksession mksession! $VIM_SESSION_PATH | qa
:command Q q
:command W w
:command Wc !wc %
filetype indent on
filetype plugin on

imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
imap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
map <silent> <Space> <Nop>
map <silent> <Space>= <cmd>lua vim.lsp.buf.formatting()<CR>
map <silent> <Space>N <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
map <silent> <Space>Q <cmd>q!<CR>
map <silent> <Space>W <cmd>w!<CR>
map <silent> <Space>a <cmd>lua vim.lsp.buf.code_action()<CR>
map <silent> <Space>cd <cmd>cd %:p:h<CR><cmd>pwd<CR>
map <silent> <Space>cn <cmd>cnext<CR>
map <silent> <Space>cp <cmd>cprev<CR>
map <silent> <Space>e <cmd>Dirvish<CR>
map <silent> <Space>f <cmd>Telescope fd<CR>
map <silent> <Space>gb <cmd>Gblame<CR>
map <silent> <Space>gd <cmd>Gdiff<CR>
map <silent> <Space>ll <cmd>lua vim.lsp.buf.formatting()<CR>
map <silent> <Space>lrn <cmd>lua vim.lsp.buf.rename()<CR>
map <silent> <Space>ms <cmd>Mksession<CR>
map <silent> <Space>n <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
map <silent> <Space>o <cmd>silent !open <cWORD><CR>
map <silent> <Space>p "*p
map <silent> <Space>q <cmd>q<CR>
map <silent> <Space>r <cmd>Telescope live_grep<cr>
map <silent> <Space>sl <cmd>luafile %<CR>
map <silent> <Space>sp <cmd>setlocal spell!<CR>
map <silent> <Space>t <cmd>tabnew<CR>
map <silent> <Space>w <cmd>w<CR>
map <silent> <Space>y "*y
nmap <BS> <Plug>(dirvish_up)
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap Q <Nop>
nmap S :%s//g<Left><Left>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gI <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gh <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
vmap < <gv
vmap > >gv
vmap so :sort <bar>w<bar>e<CR>
vmap ss :s//g<Left><Left>

iabbrev iferr if err != nil {<CR><CR>}<Up><Tab>
